'use client';

import { useState, useEffect } from 'react';
import { ArrowLeft, Download, FileText, TrendingDown, TrendingUp } from 'lucide-react';
import Link from 'next/link';

interface SummaryData {
  hasData: boolean;
  summary?: any;
  warehouseSummaries?: any[];
  config?: any;
  totalItems?: number;
  error?: string;
}

export default function SummaryPage() {
  const [data, setData] = useState<SummaryData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    fetchSummary();
  }, []);

  const fetchSummary = async () => {
    setLoading(true);
    setError('');
    
    try {
      const response = await fetch('/api/analytics');
      const result = await response.json();
      
      if (!response.ok) {
        setError(result.error || 'Failed to fetch summary');
      } else {
        setData(result);
      }
    } catch (err) {
      setError('Failed to connect to server');
    } finally {
      setLoading(false);
    }
  };

  const exportSummary = () => {
    if (!data) return;
    
    const summaryText = generateSummaryReport(data);
    const blob = new Blob([summaryText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `inventory-optimization-summary-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateSummaryReport = (data: SummaryData): string => {
    const { summary, warehouseSummaries, config } = data;
    
    return `
INVENTORY OPTIMIZATION SUMMARY REPORT
Generated on: ${new Date().toLocaleString()}

==============================================
EXECUTIVE SUMMARY
==============================================
Total Items Analyzed: ${summary.totalItems.toLocaleString()}
Total Savings Potential: ${summary.totalSavingsPotential.toLocaleString()} ${config.currency}
Average Service Level: ${(summary.averageServiceLevel * 100).toFixed(1)}%
Inventory Turnover: ${summary.inventoryTurnover.toFixed(1)}x per year

Current Total Stock Value: ${summary.totalActualStock.toLocaleString()} ${config.currency}
Optimized Total Stock Value: ${summary.totalTargetStock.toLocaleString()} ${config.currency}
Reduction Percentage: ${(((summary.totalActualStock - summary.totalTargetStock) / summary.totalActualStock) * 100).toFixed(1)}%

==============================================
WAREHOUSE BREAKDOWN
==============================================
${warehouseSummaries?.map(w => `
${w.warehouse.toUpperCase()}:
  Items: ${w.totalItems}
  Current Stock: ${w.totalActualStock.toLocaleString()} ${config.currency}
  Target Stock: ${w.totalTargetStock.toLocaleString()} ${config.currency}
  Savings Potential: ${w.totalSavingsPotential.toLocaleString()} ${config.currency}
  Service Level: ${(w.averageServiceLevel * 100).toFixed(1)}%
  Improvement: ${(((w.totalActualStock - w.totalTargetStock) / w.totalActualStock) * 100).toFixed(1)}%
`).join('') || ''}

==============================================
CONFIGURATION USED
==============================================
Volume Units: ${config.volumeUnits}
Currency: ${config.currency}
Time Unit: ${config.inputTimeUnit}
Forecasting Period: ${config.forecastingPeriod}
Reorder Approach: ${config.reorderQuantityApproach}

==============================================
RECOMMENDATIONS
==============================================
1. Implement the optimized inventory levels to achieve ${summary.totalSavingsPotential.toLocaleString()} ${config.currency} in working capital reduction
2. Focus on warehouses with highest savings potential for immediate impact
3. Maintain service levels at current ${(summary.averageServiceLevel * 100).toFixed(1)}% while reducing inventory
4. Review and adjust safety stock levels based on actual demand variability
5. Consider implementing automated reorder point systems

Report generated by Inventory Optimizer Lite
`;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <FileText className="w-8 h-8 animate-pulse mx-auto mb-4 text-blue-600" />
          <p>Generating summary...</p>
        </div>
      </div>
    );
  }

  if (error || !data?.hasData) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 py-8">
          <div className="flex items-center mb-8">
            <Link 
              href="/" 
              className="flex items-center text-blue-600 hover:text-blue-800 mr-4"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              Back to Home
            </Link>
            <h1 className="text-3xl font-bold text-gray-900">Executive Summary</h1>
          </div>

          <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-8 text-center">
            <FileText className="w-16 h-16 text-orange-500 mx-auto mb-4" />
            <h2 className="text-xl font-semibold text-gray-900 mb-4">
              No Summary Available
            </h2>
            <p className="text-gray-600 mb-6">
              Please upload and analyze your inventory data first.
            </p>
            <Link 
              href="/upload"
              className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 inline-flex items-center"
            >
              Upload Data
            </Link>
          </div>
        </div>
      </div>
    );
  }

  const { summary, warehouseSummaries, config } = data;
  const reductionPercentage = ((summary.totalActualStock - summary.totalTargetStock) / summary.totalActualStock) * 100;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center">
            <Link 
              href="/" 
              className="flex items-center text-blue-600 hover:text-blue-800 mr-4"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              Back to Home
            </Link>
            <h1 className="text-3xl font-bold text-gray-900">Executive Summary</h1>
          </div>
          
          <button
            onClick={exportSummary}
            className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            <Download className="w-4 h-4 mr-2" />
            Export Report
          </button>
        </div>

        {/* Key Metrics */}
        <div className="bg-white rounded-lg shadow-md p-8 mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">Key Performance Indicators</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {summary.totalItems.toLocaleString()}
              </div>
              <div className="text-sm text-gray-600">Items Analyzed</div>
            </div>
            
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {summary.totalSavingsPotential.toLocaleString()}
              </div>
              <div className="text-sm text-gray-600">Savings Potential ({config.currency})</div>
            </div>
            
            <div className="text-center p-4 bg-purple-50 rounded-lg">
              <div className="text-3xl font-bold text-purple-600 mb-2">
                {(summary.averageServiceLevel * 100).toFixed(1)}%
              </div>
              <div className="text-sm text-gray-600">Average Service Level</div>
            </div>
            
            <div className="text-center p-4 bg-orange-50 rounded-lg">
              <div className="text-3xl font-bold text-orange-600 mb-2">
                {reductionPercentage.toFixed(1)}%
              </div>
              <div className="text-sm text-gray-600">Inventory Reduction</div>
            </div>
          </div>
        </div>

        {/* Savings Breakdown */}
        <div className="bg-white rounded-lg shadow-md p-8 mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">Inventory Optimization Impact</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Current vs. Optimized Inventory</h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-4 bg-red-50 rounded-lg">
                  <span className="font-medium text-red-800">Current Total Stock</span>
                  <span className="font-bold text-red-600">
                    {summary.totalActualStock.toLocaleString()} {config.currency}
                  </span>
                </div>
                <div className="flex justify-between items-center p-4 bg-green-50 rounded-lg">
                  <span className="font-medium text-green-800">Optimized Target Stock</span>
                  <span className="font-bold text-green-600">
                    {summary.totalTargetStock.toLocaleString()} {config.currency}
                  </span>
                </div>
                <div className="flex justify-between items-center p-4 bg-blue-50 rounded-lg border-2 border-blue-200">
                  <span className="font-medium text-blue-800">Working Capital Reduction</span>
                  <span className="font-bold text-blue-600 text-xl">
                    {summary.totalSavingsPotential.toLocaleString()} {config.currency}
                  </span>
                </div>
              </div>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance Metrics</h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <span className="font-medium text-gray-700">Inventory Turnover</span>
                  <div className="flex items-center">
                    <span className="font-bold text-gray-900 mr-2">
                      {summary.inventoryTurnover.toFixed(1)}x
                    </span>
                    <TrendingUp className="w-4 h-4 text-green-500" />
                  </div>
                </div>
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <span className="font-medium text-gray-700">Reduction Percentage</span>
                  <div className="flex items-center">
                    <span className="font-bold text-gray-900 mr-2">
                      {reductionPercentage.toFixed(1)}%
                    </span>
                    <TrendingDown className="w-4 h-4 text-green-500" />
                  </div>
                </div>
                <div className="flex justify-between items-center p-4 bg-gray-50 rounded-lg">
                  <span className="font-medium text-gray-700">Maintained Service Level</span>
                  <span className="font-bold text-gray-900">
                    {(summary.averageServiceLevel * 100).toFixed(1)}%
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Warehouse Performance */}
        <div className="bg-white rounded-lg shadow-md p-8 mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">Warehouse Performance Summary</h2>
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Warehouse
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Items
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Current Stock ({config.currency})
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Target Stock ({config.currency})
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Savings ({config.currency})
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Reduction %
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Service Level
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {warehouseSummaries?.map((warehouse, index) => {
                  const warehouseReduction = ((warehouse.totalActualStock - warehouse.totalTargetStock) / warehouse.totalActualStock) * 100;
                  return (
                    <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {warehouse.warehouse}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {warehouse.totalItems}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600">
                        {warehouse.totalActualStock.toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-green-600">
                        {warehouse.totalTargetStock.toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-blue-600 font-bold">
                        {warehouse.totalSavingsPotential.toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-green-600 font-medium">
                        {warehouseReduction.toFixed(1)}%
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {(warehouse.averageServiceLevel * 100).toFixed(1)}%
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>

        {/* Recommendations */}
        <div className="bg-white rounded-lg shadow-md p-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">Strategic Recommendations</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Immediate Actions</h3>
              <ul className="space-y-3">
                <li className="flex items-start">
                  <span className="flex-shrink-0 w-6 h-6 bg-green-100 text-green-600 rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-0.5">1</span>
                  <span className="text-gray-700">
                    Implement optimized inventory levels to achieve {summary.totalSavingsPotential.toLocaleString()} {config.currency} working capital reduction
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 w-6 h-6 bg-green-100 text-green-600 rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-0.5">2</span>
                  <span className="text-gray-700">
                    Focus on {warehouseSummaries?.[0]?.warehouse || 'highest potential'} warehouse for immediate impact
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 w-6 h-6 bg-green-100 text-green-600 rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-0.5">3</span>
                  <span className="text-gray-700">
                    Review safety stock calculations for items with highest savings potential
                  </span>
                </li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Long-term Strategy</h3>
              <ul className="space-y-3">
                <li className="flex items-start">
                  <span className="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-0.5">1</span>
                  <span className="text-gray-700">
                    Implement automated reorder point systems based on calculated parameters
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-0.5">2</span>
                  <span className="text-gray-700">
                    Monitor and adjust service levels based on actual demand patterns
                  </span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-0.5">3</span>
                  <span className="text-gray-700">
                    Regular review and optimization cycles (quarterly recommended)
                  </span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}